
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import usuario_pb2 as usuario__pb2


class UsuarioServiceStub(object):
    """METODOS PARA CONSUMIR 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addUsuario = channel.unary_unary(
                '/UsuarioService/addUsuario',
                request_serializer=usuario__pb2.UsuarioDTO.SerializeToString,
                response_deserializer=usuario__pb2.UsuarioObjDTO.FromString,
                )
        self.getUsuario = channel.unary_unary(
                '/UsuarioService/getUsuario',
                request_serializer=usuario__pb2.GetUsuarioRequest.SerializeToString,
                response_deserializer=usuario__pb2.UsuarioObjDTO.FromString,
                )
        self.getByUsuarioYClaveRequest = channel.unary_unary(
                '/UsuarioService/getByUsuarioYClaveRequest',
                request_serializer=usuario__pb2.GetByUsuarioYClaveRequest.SerializeToString,
                response_deserializer=usuario__pb2.UsuarioObjDTO.FromString,
                )


class UsuarioServiceServicer(object):
    """METODOS PARA CONSUMIR 
    """

    def addUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getByUsuarioYClaveRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsuarioServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.addUsuario,
                    request_deserializer=usuario__pb2.UsuarioDTO.FromString,
                    response_serializer=usuario__pb2.UsuarioObjDTO.SerializeToString,
            ),
            'getUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.getUsuario,
                    request_deserializer=usuario__pb2.GetUsuarioRequest.FromString,
                    response_serializer=usuario__pb2.UsuarioObjDTO.SerializeToString,
            ),
            'getByUsuarioYClaveRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.getByUsuarioYClaveRequest,
                    request_deserializer=usuario__pb2.GetByUsuarioYClaveRequest.FromString,
                    response_serializer=usuario__pb2.UsuarioObjDTO.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UsuarioService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UsuarioService(object):
    """METODOS PARA CONSUMIR 
    """

    @staticmethod
    def addUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsuarioService/addUsuario',
            usuario__pb2.UsuarioDTO.SerializeToString,
            usuario__pb2.UsuarioObjDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsuarioService/getUsuario',
            usuario__pb2.GetUsuarioRequest.SerializeToString,
            usuario__pb2.UsuarioObjDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getByUsuarioYClaveRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UsuarioService/getByUsuarioYClaveRequest',
            usuario__pb2.GetByUsuarioYClaveRequest.SerializeToString,
            usuario__pb2.UsuarioObjDTO.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
